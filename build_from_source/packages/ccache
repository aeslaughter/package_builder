#!/bin/bash
#############
## Specifics
##
DEP=(modules)
PACKAGE='ccache'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='https://mooseframework.org/source_packages/ccache-3.2.1.tar.gz'
EXTRACT='ccache-3.2.1.tar.gz'
CONFIGURE="./configure --prefix=$PACKAGES_DIR/$PACKAGE"
BUILD='true'
INSTALL='true'

pre_run() {
    return
}
post_run() {
    cat <<EOF > $PACKAGES_DIR/Modules/3.2.10/modulefiles/ccache
#%Module1.0#####################################################################
##
## ccache modulefile
##
##
##
set              BASE_PATH        $PACKAGES_DIR

prepend-path     PATH               \$BASE_PATH/ccache/bin
prepend-path     MANPATH            \$BASE_PATH/ccache/share/man

if {[is-loaded moose/.clang]} {
  setenv           CC                 "ccache clang"
  setenv           CXX                "ccache clang++"
} else {
  setenv           CC                 "ccache gcc"
  setenv           CXX                "ccache g++"
}

setenv           CCACHE_SLOPPINESS  "time_macros" 
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
