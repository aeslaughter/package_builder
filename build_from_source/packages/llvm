#!/bin/bash
#############
## Specifics
##
DEP=(modules miniconda cmake gcc)
PACKAGE='llvm'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD=(http://mooseframework.org/source_packages/llvm-3.7.0.src.tar.xz http://mooseframework.org/source_packages/cfe-3.7.0.src.tar.xz http://mooseframework.org/source_packages/compiler-rt-3.7.0.src.tar.xz http://mooseframework.org/source_packages/libcxx-3.7.0.src.tar.xz http://mooseframework.org/source_packages/libcxxabi-3.7.0.src.tar.xz http://mooseframework.org/source_packages/openmp-3.7.0.src.tar.xz http://mooseframework.org/source_packages/clang-tools-extra-3.7.0.src.tar.xz)
EXTRACT=(llvm-3.7.0.src.tar.xz cfe-3.7.0.src.tar.xz compiler-rt-3.7.0.src.tar.xz libcxx-3.7.0.src.tar.xz libcxxabi-3.7.0.src.tar.xz openmp-3.7.0.src.tar.xz clang-tools-extra-3.7.0.src.tar.xz)
CONFIGURE="cmake -DCMAKE_INSTALL_RPATH:STRING=$PACKAGES_DIR/${PACKAGE}_3.7.0/lib -DCLANG_DEFAULT_OPENMP_RUNTIME=libomp -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PACKAGES_DIR/${PACKAGE}_3.7.0 -DCMAKE_INSTALL_NAME_DIR:STRING=$PACKAGES_DIR/${PACKAGE}_3.7.0/lib -DCMAKE_MACOSX_RPATH:BOOL=OFF ../llvm"
BUILD='true'
INSTALL='true'

pre_run() {
    cd ../
    mv llvm-3.7.0.src llvm
    if [ $? -ne 0 ]; then echo "Failed to move llvm-3.7.0.src"; cleanup 1; fi
    mv cfe-3.7.0.src llvm/tools/clang
    if [ $? -ne 0 ]; then echo "Failed to move cfe-3.7.0.src"; cleanup 1; fi
    mv compiler-rt-3.7.0.src llvm/projects/compiler-rt
    if [ $? -ne 0 ]; then echo "Failed to move compiler-rt-3.7.0.src"; cleanup 1; fi
    mv libcxx-3.7.0.src llvm/projects/libcxx
    if [ $? -ne 0 ]; then echo "Failed to move libcxx-3.7.0.src"; cleanup 1; fi
    mv libcxxabi-3.7.0.src llvm/projects/libcxxabi
    if [ $? -ne 0 ]; then echo "Failed to move libcxxabi-3.7.0.src"; cleanup 1; fi
    mv openmp-3.7.0.src llvm/projects/openmp
    if [ $? -ne 0 ]; then echo "Failed to move openmp-3.7.0.src"; cleanup 1; fi
    mv clang-tools-extra-3.7.0.src llvm/tools/clang/tools/extra
    if [ $? -ne 0 ]; then echo "Failed to move clang-tools-extra-3.7.0.src"; cleanup 1; fi
    mkdir build; cd build
    echo -e 'Done'
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/3.2.10/init/bash
    module load advanced_modules cmake miniconda
    if [ `uname` != "Darwin" ]; then
      module load gcc_5.3.0
      export CC=gcc; export CXX=g++
    fi
    cat <<EOF > $PACKAGES_DIR/Modules/3.2.10/modulefiles/moose/.clang
#%Module1.0#####################################################################
##
## Clang 3.7.0 modulefile
##
##
##
set             BASE_PATH          $PACKAGES_DIR

module load moose/.gcc_5.3.0

if { [uname sysname] != "Darwin" } {
  prepend-path    LD_LIBRARY_PATH    \$BASE_PATH/llvm_3.7.0/lib
}

prepend-path    PATH                          \$BASE_PATH/llvm_3.7.0/bin

# Needed for OpenMP
prepend-path    LIBRARY_PATH                  \$BASE_PATH/llvm_3.7.0/lib

setenv          CC                            clang
setenv          CXX                           clang++
EOF
}

post_run() {
    cd $PACKAGES_DIR/Modules/3.2.10/adv_modules
    ln -s ../modulefiles/moose/.clang clang
    if [ `uname` = "Darwin" ]; then
	cat <<'EOF' > $PACKAGES_DIR/${PACKAGE}_3.7.0/lib/change_links.sh
#!/bin/bash
for sfile in `ls | grep dylib`; do
  if ! [ -L $sfile ]; then
    if [ `otool -L $sfile | grep -c rpath` -ge 1 ]; then 
      rpaths=($(otool -L $sfile | grep rpath | cut -f 1 -d\  ))
      echo "Changing id: `pwd`/$sfile"
      install_name_tool -id `pwd`/$sfile `pwd`/$sfile
      for link in ${rpaths[*]}; do
        echo "$link $sfile"
        if [ `echo $link | grep -c $sfile` -le 0 ]; then
          orig_link=$link
          fixed_link=$(echo $link | sed -e 's?@rpath?'`pwd`'?g')
          echo "install_name_tool -change $orig_link $fixed_link $sfile"
          install_name_tool -change $orig_link $fixed_link $sfile
        fi
      done
    fi
  fi
done
EOF
	  cd $PACKAGES_DIR/${PACKAGE}_3.7.0/lib/
	  sh change_links.sh
	  rm -f change_links.sh
    fi
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
