#!/bin/bash
#############
## Specifics
##
DEP=(modules miniconda cmake gcc)
PACKAGE='llvm'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD="false"
EXTRACT="false"
CONFIGURE="false"
BUILD='true'
INSTALL='true'

pre_run() {
    if [ -d $PACKAGES_DIR/<LLVM> ]; then
	rm -rf $PACKAGES_DIR/<LLVM>
	rm -f $PACKAGES_DIR/Modules/<MODULES>/adv_modules/clang
    fi

    # Checkout LLVM
    cd $1
    git clone https://github.com/llvm-mirror/llvm.git
    if [ $? -ne 0 ]; then echo 'Failed to download llvm'; cleanup 1; fi
    cd $1/llvm; git checkout <LLVM_RELEASE>

    # Checkout Clang
    cd $1/llvm/tools
    git clone https://github.com/llvm-mirror/clang.git
    if [ $? -ne 0 ]; then echo 'Failed to download clang'; cleanup 1; fi
    cd $1/llvm/tools/clang; git checkout <LLVM_RELEASE>

    # Checkout Compiler-RT
    cd $1/llvm/projects
    git clone https://github.com/llvm-mirror/compiler-rt.git
    if [ $? -ne 0 ]; then echo 'Failed to download compiler-rt'; cleanup 1; fi
    cd $1/llvm/projects/compiler-rt; git checkout <LLVM_RELEASE>

    # Checkout LLVM-libcxx
    cd $1/llvm/projects
    git clone https://github.com/llvm-mirror/libcxx.git
    if [ $? -ne 0 ]; then echo 'Failed to download libcxx'; cleanup 1; fi
    cd $1/llvm/projects/libcxx; git checkout <LLVM_RELEASE>

    # Checkout LLVM-libcxxabi
    cd $1/llvm/projects
    git clone https://github.com/llvm-mirror/libcxxabi.git
    if [ $? -ne 0 ]; then echo 'Failed to download libcxxabi'; cleanup 1; fi
    cd $1/llvm/projects/libcxxabi; git checkout <LLVM_RELEASE>

    # Checkout LLVM-OpenMP
    cd $1/llvm/projects
    git clone https://github.com/llvm-mirror/openmp.git
    if [ $? -ne 0 ]; then echo 'Failed to download openmp'; cleanup 1; fi
    cd $1/llvm/projects/openmp; git checkout <LLVM_RELEASE>

    # Checkout Clang-Extras
    cd $1/llvm/tools/clang/tools
    git clone https://github.com/llvm-mirror/clang-tools-extra.git extra
    if [ $? -ne 0 ]; then echo 'Failed to download clang tools extra'; cleanup 1; fi
    cd $1/llvm/tools/clang/tools/extra; git checkout <LLVM_RELEASE>

    cd $1
    mkdir build; cd build
    echo -e 'Done'
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/<MODULES>/init/bash
    module load advanced_modules cmake miniconda
    if [ `uname` != "Darwin" ]; then
      module load gcc
      export CC=gcc; export CXX=g++
      cmake -DCMAKE_INSTALL_RPATH:STRING=$PACKAGES_DIR/<LLVM>/lib \
-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp \
-DGCC_INSTALL_PREFIX=$PACKAGES_DIR/<GCC> \
-DCMAKE_CXX_COMPILER=$PACKAGES_DIR/<GCC>/bin/g++ \
-DCMAKE_C_COMPILER=$PACKAGES_DIR/<GCC>/bin/gcc \
-DCMAKE_BUILD_TYPE=Release \
-DCMAKE_INSTALL_PREFIX=$PACKAGES_DIR/<LLVM> \
-DCMAKE_INSTALL_NAME_DIR:STRING=$PACKAGES_DIR/<LLVM>/lib \
-DCMAKE_MACOSX_RPATH:BOOL=OFF \
-DPYTHON_EXECUTABLE=`which python2.7` \
-G 'Unix Makefiles' ../llvm
    else
      cmake -DCMAKE_INSTALL_RPATH:STRING=$PACKAGES_DIR/<LLVM>/lib \
-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp \
-DCMAKE_BUILD_TYPE=Release \
-DCMAKE_INSTALL_PREFIX=$PACKAGES_DIR/<LLVM> \
-DCMAKE_INSTALL_NAME_DIR:STRING=$PACKAGES_DIR/<LLVM>/lib \
-DCMAKE_MACOSX_RPATH:BOOL=OFF \
-DPYTHON_EXECUTABLE=`which python2.7` \
../llvm
    fi
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<CLANG>
#%Module1.0#####################################################################
##
## <CLANG> modulefile
##
##
##
set             BASE_PATH          $PACKAGES_DIR

module load moose/.<GCC>

if { [uname sysname] != "Darwin" } {
  prepend-path    LD_LIBRARY_PATH    \$BASE_PATH/<LLVM>/lib
}

prepend-path    PATH                          \$BASE_PATH/<LLVM>/bin

# Needed for OpenMP
prepend-path    LIBRARY_PATH                  \$BASE_PATH/<LLVM>/lib

# Needed for Python Clang bindings
# >>> clang.cindex.Config.set_library_path(os.getenv('MOOSE_CLANG_LIB'))
prepend-path    PYTHONPATH                    \$BASE_PATH/<LLVM>/bindings/python
setenv          MOOSE_CLANG_LIB               \$BASE_PATH/<LLVM>/lib

setenv          CC                            clang
setenv          CXX                           clang++
EOF
}

post_run() {
    cd $PACKAGES_DIR/Modules/<MODULES>/adv_modules
    ln -s ../modulefiles/moose/.<CLANG> clang
    if [ `uname` = "Darwin" ]; then
	cat <<'EOF' > $PACKAGES_DIR/<LLVM>/lib/change_links.sh
#!/bin/bash
for sfile in `ls | grep dylib`; do
  if ! [ -L $sfile ]; then
    if [ `otool -L $sfile | grep -c rpath` -ge 1 ]; then 
      rpaths=($(otool -L $sfile | grep rpath | cut -f 1 -d\  ))
      echo "Changing id: `pwd`/$sfile"
      install_name_tool -id `pwd`/$sfile `pwd`/$sfile
      for link in ${rpaths[*]}; do
        echo "$link $sfile"
        if [ `echo $link | grep -c $sfile` -le 0 ]; then
          orig_link=$link
          fixed_link=$(echo $link | sed -e 's?@rpath?'`pwd`'?g')
          echo "install_name_tool -change $orig_link $fixed_link $sfile"
          install_name_tool -change $orig_link $fixed_link $sfile
        fi
      done
    fi
  fi
done
EOF
	  cd $PACKAGES_DIR/<LLVM>/lib/
	  sh change_links.sh
	  rm -f change_links.sh
    fi
    cp -R $1/llvm/tools/clang/bindings $PACKAGES_DIR/<LLVM>/
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
